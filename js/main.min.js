async function loadLanguage(e) {
  try {
    const t = await fetch("../translations/lang.json");
    if (!t.ok) throw new Error("Übersetzungen konnten nicht geladen werden");
    const n = await t.json();
    document.querySelectorAll("[data-i18n]").forEach((t) => {
      const o = t.dataset.i18n;
      n[e]?.[o]
        ? (t.innerHTML = n[e][o])
        : console.warn(`Fehlende Übersetzung für: ${o}`);
    });
    const o = document.getElementById("header-logo");
    if (o) {
      const e = document.body.classList.contains("force-dark");
      o.src = e ? "img/RikaLogo_dunkel.svg" : "img/RikaLogo_hell.svg";
    }
    manageFocusAfterLoad();
  } catch (e) {
    console.error("Fehler beim Laden der Übersetzungen:", e);
  }
}
function initLanguage() {
  const e = localStorage.getItem("preferredLang") || "en";
  (document.documentElement.lang = e), loadLanguage(e);
  const t = document.getElementById("language-toggle-btn");
  t &&
    ((t.textContent = "de" === e ? "DE | EN" : "EN | DE"),
    t.addEventListener("click", () => {
      const e = "de" === document.documentElement.lang ? "en" : "de";
      (document.documentElement.lang = e),
        localStorage.setItem("preferredLang", e),
        loadLanguage(e),
        (t.textContent = "de" === e ? "DE | EN" : "EN | DE");
    }),
    t.addEventListener("keydown", (e) => {
      if ("Enter" === e.key || " " === e.key) {
        e.preventDefault();
        const n = "de" === document.documentElement.lang ? "en" : "de";
        (document.documentElement.lang = n),
          localStorage.setItem("preferredLang", n),
          loadLanguage(n),
          (t.textContent = "de" === n ? "DE | EN" : "EN | DE");
      }
    }));
}
async function loadComponent(e, t) {
  try {
    const n = await fetch(t);
    if (!n.ok) throw new Error(`HTTP-Fehler! Status: ${n.status}`);
    return (
      (document.querySelector(e).innerHTML = await n.text()),
      "header" === e && manageFocusAfterLoad(),
      !0
    );
  } catch (e) {
    return console.error(`Fehler beim Laden von ${t}:`, e), !1;
  }
}
function initAccessibility() {
  const e = (e) => document.querySelector(e),
    t = (e) => document.querySelectorAll(e),
    n = {
      floaterBtn: e(".floater-btn"),
      panel: e(".accessibility-panel"),
      closeBtn: e(".close-panel"),
      themeBtns: t("[data-theme]"),
      fontSizeBtns: t("[data-size]"),
      currentSizeDisplay: e(".current-size"),
    };
  n.floaterBtn?.addEventListener("click", () => {
    n.panel.hidden = !n.panel.hidden;
  }),
    n.floaterBtn?.addEventListener("keydown", (e) => {
      ("Enter" !== e.key && " " !== e.key) ||
        (e.preventDefault(),
        (n.panel.hidden = !n.panel.hidden),
        n.panel.hidden || setTimeout(() => n.closeBtn.focus(), 100));
    }),
    n.closeBtn?.addEventListener("click", () => {
      n.panel.hidden = !0;
    }),
    n.closeBtn?.addEventListener("keydown", (e) => {
      "Escape" === e.key && ((n.panel.hidden = !0), n.floaterBtn.focus());
    }),
    n.themeBtns?.forEach((e) => {
      e.addEventListener("click", () => {
        const t = e.dataset.theme;
        document.body.classList.remove("force-light", "force-dark"),
          "auto" !== t && document.body.classList.add(`force-${t}`),
          localStorage.setItem("theme", "auto" === t ? "" : t),
          n.themeBtns.forEach((e) => e.classList.remove("active")),
          e.classList.add("active"),
          updateIcons();
      }),
        e.addEventListener("keydown", (t) => {
          ("Enter" !== t.key && " " !== t.key) ||
            (t.preventDefault(), e.click());
        });
    }),
    n.fontSizeBtns?.forEach((e) => {
      e.addEventListener("click", () => {
        const t = parseInt(
            document.documentElement.style.getPropertyValue("--font-scale") ||
              100
          ),
          o = Math.min(
            150,
            Math.max(80, "+" === e.dataset.size ? t + 10 : t - 10)
          );
        document.documentElement.style.setProperty("--font-scale", `${o}%`),
          (n.currentSizeDisplay.textContent = `${o}%`),
          localStorage.setItem("fontScale", o);
      });
    });
  const o = localStorage.getItem("theme"),
    a = localStorage.getItem("fontScale") || 100;
  if (o) {
    const t = e(`[data-theme="${o}"]`);
    t?.click();
  }
  document.documentElement.style.setProperty("--font-scale", `${a}%`),
    (n.currentSizeDisplay.textContent = `${a}%`),
    new MutationObserver(() => {
      const e = document.getElementById("header-logo");
      if (e) {
        const t = document.body.classList.contains("force-dark");
        e.src = t ? "img/RikaLogo_dunkel.svg" : "img/RikaLogo_hell.svg";
      }
    }).observe(document.body, { attributes: !0, attributeFilter: ["class"] });
}
function updateIcons() {
  const e = document.body.classList.contains("force-dark");
  document.querySelectorAll(".theme-icon").forEach((t) => {
    const n = e ? t.dataset.dark : t.dataset.light;
    n && t.src !== n && (t.src = n);
  });
}
function initContactForm() {
  const e = document.getElementById("contact-form");
  e &&
    (e.addEventListener("submit", async (t) => {
      t.preventDefault();
      const n = e.querySelector('button[type="submit"]');
      n.disabled = !0;
      try {
        if ("undefined" != typeof grecaptcha && !grecaptcha.getResponse())
          return void showNotification(
            "Bitte bestätige, dass du kein Roboter bist",
            "error"
          );
        const t = await fetch(e.action, {
          method: "POST",
          body: new FormData(e),
          headers: { Accept: "application/json" },
        });
        if (!t.ok) throw new Error(await t.text());
        showNotification("Nachricht gesendet!", "success"),
          e.reset(),
          "undefined" != typeof grecaptcha && grecaptcha.reset();
      } catch (e) {
        console.error("Formularfehler:", e),
          showNotification("Fehler beim Senden", "error");
      } finally {
        n.disabled = !1;
      }
    }),
    e.addEventListener("keydown", (t) => {
      if ("Escape" === t.key) {
        e.querySelector('button[type="submit"]').focus();
      }
    }));
}
function manageFocusAfterLoad() {
  const e = document.querySelector("main");
  e && (e.setAttribute("tabindex", "-1"), e.focus());
}
function showNotification(e, t = "info") {
  const n = document.createElement("div");
  (n.className = `notification ${t}`),
    (n.textContent = e),
    document.body.appendChild(n),
    setTimeout(() => n.remove(), 5e3);
}
document.addEventListener("DOMContentLoaded", async () => {
  try {
    const [e, t, n] = await Promise.all([
        loadComponent("header", "components/header.html"),
        loadComponent("footer", "components/footer.html"),
        loadComponent(
          ".accessibility-container",
          "components/accessibility-widget.html"
        ),
        loadComponent(".socials-container", "components/socials.html"),
      ]),
      o = window.location.pathname.split("/").pop() || "home.html";
    document.querySelectorAll(".nav-link").forEach((e) => {
      const t = e.getAttribute("href").split("/").pop();
      e.classList.toggle("active", t === o);
    });
    const a = document.querySelector(".hamburger"),
      c = document.querySelector(".sidebar"),
      s = document.createElement("div");
    let r;
    s.classList.add("overlay"),
      document.body.appendChild(s),
      a.addEventListener("click", () => {
        const e = c.classList.toggle("open");
        s.classList.toggle("active"), a.setAttribute("aria-expanded", e);
      }),
      a.addEventListener("keydown", (e) => {
        if ("Enter" === e.key || " " === e.key) {
          e.preventDefault();
          const t = c.classList.toggle("open");
          s.classList.toggle("active"), a.setAttribute("aria-expanded", t);
        }
      }),
      c.addEventListener("keydown", (e) => {
        "Escape" === e.key &&
          (c.classList.remove("open"), s.classList.remove("active"), a.focus());
      }),
      c.addEventListener("transitionend", () => {
        if (c.classList.contains("open")) {
          const e = c.querySelector(".mobile-nav a");
          e?.focus();
        }
      }),
      document.querySelector(".sidebar").addEventListener("click", (e) => {
        e.target.closest(".mobile-nav a") &&
          (c.classList.remove("open"),
          s.classList.remove("active"),
          a.classList.remove("active"));
      }),
      window.addEventListener("resize", () => {
        clearTimeout(r),
          (r = setTimeout(() => {
            window.innerWidth > 768 &&
              (c.classList.remove("open"),
              s.classList.remove("active"),
              a.classList.remove("active"));
          }, 250));
      });
    const i = document.getElementById("mobile-language-toggle-btn");
    i &&
      (i.addEventListener("click", () => {
        const e = "de" === document.documentElement.lang ? "en" : "de";
        (document.documentElement.lang = e),
          loadLanguage(e),
          (i.textContent = "de" === e ? "DE | EN" : "EN | DE");
      }),
      i.addEventListener("keydown", (e) => {
        if ("Enter" === e.key || " " === e.key) {
          e.preventDefault();
          const t = "de" === document.documentElement.lang ? "en" : "de";
          (document.documentElement.lang = t),
            loadLanguage(t),
            (i.textContent = "de" === t ? "DE | EN" : "EN | DE");
        }
      })),
      initLanguage(),
      initAccessibility(),
      initContactForm(),
      new MutationObserver(updateIcons).observe(document.body, {
        attributes: !0,
        attributeFilter: ["class"],
      });
  } catch (e) {
    console.error("Initialisierungsfehler:", e);
  }
}),
  document.addEventListener("keydown", (e) => {
    if ("Tab" === e.key && e.shiftKey) {
      const e = document.querySelector(".skip-link");
      e && e.focus();
    }
    if ("Escape" === e.key) {
      const e = document.querySelector(".sidebar"),
        t = document.querySelector(".overlay"),
        n = document.querySelector(".hamburger");
      e?.classList.contains("open") &&
        (e.classList.remove("open"), t?.classList.remove("active"), n?.focus());
    }
  });
